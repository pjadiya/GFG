Method 1: 
class Solution:
    def longestPalindrome(self, s: str) -> str:
        n = len(s)
        t= [[-1 for _ in range(n+1)] for _ in range(n+1)]
        for i in range(n+1):
            t[0][i]=0
            t[i][0]=0
        mx = float('-inf')
        mx_i=0
        for i in range(1,n+1):
            for j in range(1,n+1):
                if s[i-1]==s[n-j]:
                    # print(s[i-1],s[n-1-j],i,n-j)
                    t[i][j] = t[i-1][j-1]+1
                else:
                    t[i][j]=0
                if t[i][j]>mx:
                    mx= t[i][j]
                    mx_i=i-1
        for i in range(n+1):
            print(t[i])
        return s[mx_i-mx+1:mx_i+1]
Method 2:

class Solution:
    def Ispali(self, s,i,j,dp):
        if i>=j:
            return True
        if dp[i][j]!=-1:
            return dp[i][j]
        if s[i]!=s[j]:
            return False
        dp[i][j]= self.Ispali(s,i+1,j-1,dp)
        return dp[i][j]
    def longestPalindrome(self, s: str) -> str:
        n = len(s)
        dp = [[-1 for i in range(n+1)] for _ in range(n+1)]
        res =''
        for i in range(n):
            for j in range(i,n,1):
                if s[i]==s[j] and self.Ispali(s,i+1,j-1,dp):
                    if (j-i+1)>len(res):
                        res = s[i:j+1]

        return res
